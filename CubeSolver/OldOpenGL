class OpenGLWidget(QtWidgets.QOpenGLWidget):
    def __init__(self, parent=None):
        super(OpenGLWidget, self).__init__(parent)
        self.lastPos = None
        self.rotation = [570.0, -46.0, 0]
        self.zoom = 1.3

    def initializeGL(self):
        glClearColor(0.0, 0.0, 0.0, 1.0)
        glEnable(GL_DEPTH_TEST)

    def resizeGL(self, w, h):
        glViewport(0, 0, w, h)
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        gluPerspective(45, (w / h), 0.5, 40)
        glTranslatef(0.0, 0.0, -17.5)
        glMatrixMode(GL_MODELVIEW)

    def paintGL(self):
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
        glLoadIdentity()
        glScalef(self.zoom, self.zoom, self.zoom)
        glRotatef(self.rotation[0], 1, 0, 0)
        glRotatef(self.rotation[1], 0, 1, 0)
        glRotatef(self.rotation[2], 0, 0, 1)
        self.cube()

    def cube(self):
        cube_verts = (
            (3, -3, -3), (3, 3, -3), (-3, 3, -3), (-3, -3, -3),
            (3, -3, 3), (3, 3, 3), (-3, -3, 3), (-3, 3, 3)
        )
        cube_edges = (
            (0, 1), (0, 3), (0, 4), (2, 1), (2, 3), (2, 7),
            (6, 3), (6, 4), (6, 7), (5, 1), (5, 4), (5, 7)
        )
        cube_surfaces = (
            (0, 1, 2, 3), (3, 2, 7, 6), (6, 7, 5, 4),
            (4, 5, 1, 0), (1, 5, 7, 2), (4, 0, 3, 6)
        )

        colors = [
            (1, 1, 1),  # White
            (0, 0.318, 0.729),  # Blue
            (1, 0.835, 0),  # Yellow
            (0, 0.62, 0.376),  # Green
            (1, 0.345, 0),  # Orange
            (0.8, 0.118, 0.118)  # Red
        ]

        glBegin(GL_QUADS)
        for i, surface in enumerate(cube_surfaces):
            glColor3fv(colors[i])
            for vertex in surface:
                glVertex3fv(cube_verts[vertex])
        glEnd()

        glBegin(GL_LINES)
        glColor3fv((0, 0, 0))
        for edge in cube_edges:
            for vertex in edge:
                glVertex3fv(cube_verts[vertex])
        glEnd()

        glLineWidth(5)
        glColor3fv((0, 0, 0))  # Grid lines color: black

        for i in range(3):
            for j in range(3):
                # X-Y plane (Front and Back faces)
                glBegin(GL_LINE_LOOP)
                glVertex3f(3 - i * 2, 3 - j * 2, 3)
                glVertex3f(3 - (i + 1) * 2, 3 - j * 2, 3)
                glVertex3f(3 - (i + 1) * 2, 3 - (j + 1) * 2, 3)
                glVertex3f(3 - i * 2, 3 - (j + 1) * 2, 3)
                glEnd()

                glBegin(GL_LINE_LOOP)
                glVertex3f(3 - i * 2, 3 - j * 2, -3)
                glVertex3f(3 - (i + 1) * 2, 3 - j * 2, -3)
                glVertex3f(3 - (i + 1) * 2, 3 - (j + 1) * 2, -3)
                glVertex3f(3 - i * 2, 3 - (j + 1) * 2, -3)
                glEnd()

                # X-Z plane (Top and Bottom faces)
                glBegin(GL_LINE_LOOP)
                glVertex3f(3 - i * 2, 3, 3 - j * 2)
                glVertex3f(3 - (i + 1) * 2, 3, 3 - j * 2)
                glVertex3f(3 - (i + 1) * 2, 3, 3 - (j + 1) * 2)
                glVertex3f(3 - i * 2, 3, 3 - (j + 1) * 2)
                glEnd()

                glBegin(GL_LINE_LOOP)
                glVertex3f(3 - i * 2, -3, 3 - j * 2)
                glVertex3f(3 - (i + 1) * 2, -3, 3 - j * 2)
                glVertex3f(3 - (i + 1) * 2, -3, 3 - (j + 1) * 2)
                glVertex3f(3 - i * 2, -3, 3 - (j + 1) * 2)
                glEnd()

                # Y-Z plane (Left and Right faces)
                glBegin(GL_LINE_LOOP)
                glVertex3f(3, 3 - i * 2, 3 - j * 2)
                glVertex3f(3, 3 - (i + 1) * 2, 3 - j * 2)
                glVertex3f(3, 3 - (i + 1) * 2, 3 - (j + 1) * 2)
                glVertex3f(3, 3 - i * 2, 3 - (j + 1) * 2)
                glEnd()

                glBegin(GL_LINE_LOOP)
                glVertex3f(-3, 3 - i * 2, 3 - j * 2)
                glVertex3f(-3, 3 - (i + 1) * 2, 3 - j * 2)
                glVertex3f(-3, 3 - (i + 1) * 2, 3 - (j + 1) * 2)
                glVertex3f(-3, 3 - i * 2, 3 - (j + 1) * 2)
                glEnd()